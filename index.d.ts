/** Declaration file generated by dts-gen */

export function DFU(...args: any[]): any;

export function DFUse(...args: any[]): any;

export namespace DFU {
    class Device {
        constructor(...args: any[]);

        abort(...args: any[]): Promise<void>;

        abortToIdle(...args: any[]): Promise<void>;

        clearStatus(...args: any[]): Promise<any>;

        close(...args: any[]): Promise<void>;

        detach(...args: any[]): Promise<any>;

        do_download(...args: any[]): Promise<void>;

        do_upload(...args: any[]): Promise<Number>;

        download(...args: any[]): void;

        getState(...args: any[]): void;

        getStatus(...args: any[]): void;

        logDebug(...args: any[]): void;

        logError(...args: any[]): void;

        logInfo(...args: any[]): void;

        logProgress(...args: any[]): void;

        logWarning(...args: any[]): void;

        open(...args: any[]): void;

        poll_until(...args: any[]): void;

        poll_until_idle(...args: any[]): void;

        readConfigurationDescriptor(...args: any[]): void;

        readDeviceDescriptor(...args: any[]): void;

        readInterfaceNames(...args: any[]): Promise<void>;

        readStringDescriptor(...args: any[]): void;

        requestIn(...args: any[]): void;

        requestOut(...args: any[]): void;

        upload(...args: any[]): void;

        waitDisconnected(...args: any[]): void;

    }

    const ABORT: number;

    const CLRSTATUS: number;

    const DETACH: number;

    const DNLOAD: number;

    const GETSTATE: number;

    const GETSTATUS: number;

    const STATUS_OK: number;

    const UPLOAD: number;

    const appDETACH: number;

    const appIDLE: number;

    const dfuDNBUSY: number;

    const dfuDNLOAD_IDLE: number;

    const dfuDNLOAD_SYNC: number;

    const dfuERROR: number;

    const dfuIDLE: number;

    const dfuMANIFEST: number;

    const dfuMANIFEST_SYNC: number;

    const dfuMANIFEST_WAIT_RESET: number;

    const dfuUPLOAD_IDLE: number;

    function findAllDfuInterfaces(...args: any[]): void;

    function findDeviceDfuInterfaces(...args: any[]): any[];

    function parseConfigurationDescriptor(...args: any[]): any;

    function parseDeviceDescriptor(...args: any[]): void;

    function parseFunctionalDescriptor(...args: any[]): void;

    function parseInterfaceDescriptor(...args: any[]): void;

    function parseSubDescriptors(...args: any[]): void;

}

export namespace DFUse {
    class Device {
        constructor(...args: any[]);

        dfuseCommand(...args: any[]): void;

        do_download(...args: any[]): void;

        do_upload(...args: any[]): void;

        erase(...args: any[]): void;

        getFirstWritableSegment(...args: any[]): void;

        getMaxReadSize(...args: any[]): void;

        getSectorEnd(...args: any[]): void;

        getSectorStart(...args: any[]): void;

        getSegment(...args: any[]): void;

    }

    const ABORT: number;

    const CLRSTATUS: number;

    const DETACH: number;

    const DNLOAD: number;

    const ERASE_SECTOR: number;

    const GETSTATE: number;

    const GETSTATUS: number;

    const GET_COMMANDS: number;

    const SET_ADDRESS: number;

    const STATUS_OK: number;

    const UPLOAD: number;

    const appDETACH: number;

    const appIDLE: number;

    const dfuDNBUSY: number;

    const dfuDNLOAD_IDLE: number;

    const dfuDNLOAD_SYNC: number;

    const dfuERROR: number;

    const dfuIDLE: number;

    const dfuMANIFEST: number;

    const dfuMANIFEST_SYNC: number;

    const dfuMANIFEST_WAIT_RESET: number;

    const dfuUPLOAD_IDLE: number;

    function findAllDfuInterfaces(...args: any[]): void;

    function findDeviceDfuInterfaces(...args: any[]): any[];

    function parseConfigurationDescriptor(...args: any[]): void;

    function parseDeviceDescriptor(...args: any[]): void;

    function parseFunctionalDescriptor(...args: any[]): void;

    function parseInterfaceDescriptor(...args: any[]): void;

    function parseMemoryDescriptor(...args: any[]): void;

    function parseSubDescriptors(...args: any[]): void;

}
